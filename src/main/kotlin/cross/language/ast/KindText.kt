package cross.language.ast

class KindText {
    companion object {
        const val AccessorList = "AccessorList"
        const val AddAccessorDeclaration = "AddAccessorDeclaration"
        const val AddAssignmentExpression = "AddAssignmentExpression"
        const val AddExpression = "AddExpression"
        const val AddKeyword = "AddKeyword"
        const val AddressOfExpression = "AddressOfExpression"
        const val AliasKeyword = "AliasKeyword"
        const val AliasQualifiedName = "AliasQualifiedName"
        const val AmpersandAmpersandToken = "AmpersandAmpersandToken"
        const val AmpersandEqualsToken = "AmpersandEqualsToken"
        const val AmpersandToken = "AmpersandToken"
        const val AndAssignmentExpression = "AndAssignmentExpression"
        const val AndKeyword = "AndKeyword"
        const val AndPattern = "AndPattern"
        const val AnnotationsKeyword = "AnnotationsKeyword"
        const val AnonymousMethodExpression = "AnonymousMethodExpression"
        const val AnonymousObjectCreationExpression = "AnonymousObjectCreationExpression"
        const val AnonymousObjectMemberDeclarator = "AnonymousObjectMemberDeclarator"
        const val ArgListExpression = "ArgListExpression"
        const val ArgListKeyword = "ArgListKeyword"
        const val Argument = "Argument"
        const val ArgumentList = "ArgumentList"
        const val ArrayCreationExpression = "ArrayCreationExpression"
        const val ArrayInitializerExpression = "ArrayInitializerExpression"
        const val ArrayRankSpecifier = "ArrayRankSpecifier"
        const val ArrayType = "ArrayType"
        const val ArrowExpressionClause = "ArrowExpressionClause"
        const val AscendingKeyword = "AscendingKeyword"
        const val AscendingOrdering = "AscendingOrdering"
        const val AsExpression = "AsExpression"
        const val AsKeyword = "AsKeyword"
        const val AssemblyKeyword = "AssemblyKeyword"
        const val AsteriskEqualsToken = "AsteriskEqualsToken"
        const val AsteriskToken = "AsteriskToken"
        const val AsyncKeyword = "AsyncKeyword"
        const val Attribute = "Attribute"
        const val AttributeArgument = "AttributeArgument"
        const val AttributeArgumentList = "AttributeArgumentList"
        const val AttributeList = "AttributeList"
        const val AttributeTargetSpecifier = "AttributeTargetSpecifier"
        const val AwaitExpression = "AwaitExpression"
        const val AwaitKeyword = "AwaitKeyword"
        const val BackslashToken = "BackslashToken"
        const val BadDirectiveTrivia = "BadDirectiveTrivia"
        const val BadToken = "BadToken"
        const val BarBarToken = "BarBarToken"
        const val BarEqualsToken = "BarEqualsToken"
        const val BarToken = "BarToken"
        const val BaseConstructorInitializer = "BaseConstructorInitializer"
        const val BaseExpression = "BaseExpression"
        const val BaseKeyword = "BaseKeyword"
        const val BaseList = "BaseList"
        const val BitwiseAndExpression = "BitwiseAndExpression"
        const val BitwiseNotExpression = "BitwiseNotExpression"
        const val BitwiseOrExpression = "BitwiseOrExpression"
        const val Block = "Block"
        const val BoolKeyword = "BoolKeyword"
        const val BracketedArgumentList = "BracketedArgumentList"
        const val BracketedParameterList = "BracketedParameterList"
        const val BreakKeyword = "BreakKeyword"
        const val BreakStatement = "BreakStatement"
        const val ByKeyword = "ByKeyword"
        const val ByteKeyword = "ByteKeyword"
        const val CaretEqualsToken = "CaretEqualsToken"
        const val CaretToken = "CaretToken"
        const val CaseKeyword = "CaseKeyword"
        const val CasePatternSwitchLabel = "CasePatternSwitchLabel"
        const val CaseSwitchLabel = "CaseSwitchLabel"
        const val CastExpression = "CastExpression"
        const val CatchClause = "CatchClause"
        const val CatchDeclaration = "CatchDeclaration"
        const val CatchFilterClause = "CatchFilterClause"
        const val CatchKeyword = "CatchKeyword"
        const val CharacterLiteralExpression = "CharacterLiteralExpression"
        const val CharacterLiteralToken = "CharacterLiteralToken"
        const val CharKeyword = "CharKeyword"
        const val CheckedExpression = "CheckedExpression"
        const val CheckedKeyword = "CheckedKeyword"
        const val CheckedStatement = "CheckedStatement"
        const val ChecksumKeyword = "ChecksumKeyword"
        const val ClassConstraint = "ClassConstraint"
        const val ClassDeclaration = "ClassDeclaration"
        const val ClassKeyword = "ClassKeyword"
        const val CloseBraceToken = "CloseBraceToken"
        const val CloseBracketToken = "CloseBracketToken"
        const val CloseParenToken = "CloseParenToken"
        const val CoalesceAssignmentExpression = "CoalesceAssignmentExpression"
        const val CoalesceExpression = "CoalesceExpression"
        const val CollectionInitializerExpression = "CollectionInitializerExpression"
        const val ColonColonToken = "ColonColonToken"
        const val ColonToken = "ColonToken"
        const val CommaToken = "CommaToken"
        const val CompilationUnit = "CompilationUnit"
        const val ComplexElementInitializerExpression = "ComplexElementInitializerExpression"
        const val ConditionalAccessExpression = "ConditionalAccessExpression"
        const val ConditionalExpression = "ConditionalExpression"
        const val ConflictMarkerTrivia = "ConflictMarkerTrivia"
        const val ConstantPattern = "ConstantPattern"
        const val ConstKeyword = "ConstKeyword"
        const val ConstructorConstraint = "ConstructorConstraint"
        const val ConstructorDeclaration = "ConstructorDeclaration"
        const val ContinueKeyword = "ContinueKeyword"
        const val ContinueStatement = "ContinueStatement"
        const val ConversionOperatorDeclaration = "ConversionOperatorDeclaration"
        const val ConversionOperatorMemberCref = "ConversionOperatorMemberCref"
        const val CrefBracketedParameterList = "CrefBracketedParameterList"
        const val CrefParameter = "CrefParameter"
        const val CrefParameterList = "CrefParameterList"
        const val DecimalKeyword = "DecimalKeyword"
        const val DeclarationExpression = "DeclarationExpression"
        const val DeclarationPattern = "DeclarationPattern"
        const val DefaultConstraint = "DefaultConstraint"
        const val DefaultExpression = "DefaultExpression"
        const val DefaultKeyword = "DefaultKeyword"
        const val DefaultLiteralExpression = "DefaultLiteralExpression"
        const val DefaultSwitchLabel = "DefaultSwitchLabel"
        const val DefineDirectiveTrivia = "DefineDirectiveTrivia"
        const val DefineKeyword = "DefineKeyword"
        const val DelegateDeclaration = "DelegateDeclaration"
        const val DelegateKeyword = "DelegateKeyword"
        const val DescendingKeyword = "DescendingKeyword"
        const val DescendingOrdering = "DescendingOrdering"
        const val DestructorDeclaration = "DestructorDeclaration"
        const val DisabledTextTrivia = "DisabledTextTrivia"
        const val DisableKeyword = "DisableKeyword"
        const val DiscardDesignation = "DiscardDesignation"
        const val DiscardPattern = "DiscardPattern"
        const val DivideAssignmentExpression = "DivideAssignmentExpression"
        const val DivideExpression = "DivideExpression"
        const val DocumentationCommentExteriorTrivia = "DocumentationCommentExteriorTrivia"
        const val DoKeyword = "DoKeyword"
        const val DollarToken = "DollarToken"
        const val DoStatement = "DoStatement"
        const val DotDotToken = "DotDotToken"
        const val DotToken = "DotToken"
        const val DoubleKeyword = "DoubleKeyword"
        const val DoubleQuoteToken = "DoubleQuoteToken"
        const val ElementAccessExpression = "ElementAccessExpression"
        const val ElementBindingExpression = "ElementBindingExpression"
        const val ElifDirectiveTrivia = "ElifDirectiveTrivia"
        const val ElifKeyword = "ElifKeyword"
        const val ElseClause = "ElseClause"
        const val ElseDirectiveTrivia = "ElseDirectiveTrivia"
        const val ElseKeyword = "ElseKeyword"
        const val EmptyStatement = "EmptyStatement"
        const val EnableKeyword = "EnableKeyword"
        const val EndIfDirectiveTrivia = "EndIfDirectiveTrivia"
        const val EndIfKeyword = "EndIfKeyword"
        const val EndOfDirectiveToken = "EndOfDirectiveToken"
        const val EndOfDocumentationCommentToken = "EndOfDocumentationCommentToken"
        const val EndOfFileToken = "EndOfFileToken"
        const val EndOfLineTrivia = "EndOfLineTrivia"
        const val EndRegionDirectiveTrivia = "EndRegionDirectiveTrivia"
        const val EndRegionKeyword = "EndRegionKeyword"
        const val EnumDeclaration = "EnumDeclaration"
        const val EnumKeyword = "EnumKeyword"
        const val EnumMemberDeclaration = "EnumMemberDeclaration"
        const val EqualsEqualsToken = "EqualsEqualsToken"
        const val EqualsExpression = "EqualsExpression"
        const val EqualsGreaterThanToken = "EqualsGreaterThanToken"
        const val EqualsKeyword = "EqualsKeyword"
        const val EqualsToken = "EqualsToken"
        const val EqualsValueClause = "EqualsValueClause"
        const val ErrorDirectiveTrivia = "ErrorDirectiveTrivia"
        const val ErrorKeyword = "ErrorKeyword"
        const val EventDeclaration = "EventDeclaration"
        const val EventFieldDeclaration = "EventFieldDeclaration"
        const val EventKeyword = "EventKeyword"
        const val ExclamationEqualsToken = "ExclamationEqualsToken"
        const val ExclamationToken = "ExclamationToken"
        const val ExclusiveOrAssignmentExpression = "ExclusiveOrAssignmentExpression"
        const val ExclusiveOrExpression = "ExclusiveOrExpression"
        const val ExplicitInterfaceSpecifier = "ExplicitInterfaceSpecifier"
        const val ExplicitKeyword = "ExplicitKeyword"
        const val ExpressionColon = "ExpressionColon"
        const val ExpressionStatement = "ExpressionStatement"
        const val ExternAliasDirective = "ExternAliasDirective"
        const val ExternKeyword = "ExternKeyword"
        const val FalseKeyword = "FalseKeyword"
        const val FalseLiteralExpression = "FalseLiteralExpression"
        const val FieldDeclaration = "FieldDeclaration"
        const val FieldKeyword = "FieldKeyword"
        const val FileScopedNamespaceDeclaration = "FileScopedNamespaceDeclaration"
        const val FinallyClause = "FinallyClause"
        const val FinallyKeyword = "FinallyKeyword"
        const val FixedKeyword = "FixedKeyword"
        const val FixedStatement = "FixedStatement"
        const val FloatKeyword = "FloatKeyword"
        const val ForEachKeyword = "ForEachKeyword"
        const val ForEachStatement = "ForEachStatement"
        const val ForEachVariableStatement = "ForEachVariableStatement"
        const val ForKeyword = "ForKeyword"
        const val ForStatement = "ForStatement"
        const val FromClause = "FromClause"
        const val FromKeyword = "FromKeyword"
        const val FunctionPointerCallingConvention = "FunctionPointerCallingConvention"
        const val FunctionPointerParameter = "FunctionPointerParameter"
        const val FunctionPointerParameterList = "FunctionPointerParameterList"
        const val FunctionPointerType = "FunctionPointerType"
        const val FunctionPointerUnmanagedCallingConvention = "FunctionPointerUnmanagedCallingConvention"
        const val FunctionPointerUnmanagedCallingConventionList = "FunctionPointerUnmanagedCallingConventionList"
        const val GenericName = "GenericName"
        const val GetAccessorDeclaration = "GetAccessorDeclaration"
        const val GetKeyword = "GetKeyword"
        const val GlobalKeyword = "GlobalKeyword"
        const val GlobalStatement = "GlobalStatement"
        const val GotoCaseStatement = "GotoCaseStatement"
        const val GotoDefaultStatement = "GotoDefaultStatement"
        const val GotoKeyword = "GotoKeyword"
        const val GotoStatement = "GotoStatement"
        const val GreaterThanEqualsToken = "GreaterThanEqualsToken"
        const val GreaterThanExpression = "GreaterThanExpression"
        const val GreaterThanGreaterThanEqualsToken = "GreaterThanGreaterThanEqualsToken"
        const val GreaterThanGreaterThanGreaterThanEqualsToken = "GreaterThanGreaterThanGreaterThanEqualsToken"
        const val GreaterThanGreaterThanGreaterThanToken = "GreaterThanGreaterThanGreaterThanToken"
        const val GreaterThanGreaterThanToken = "GreaterThanGreaterThanToken"
        const val GreaterThanOrEqualExpression = "GreaterThanOrEqualExpression"
        const val GreaterThanToken = "GreaterThanToken"
        const val GroupClause = "GroupClause"
        const val GroupKeyword = "GroupKeyword"
        const val HashToken = "HashToken"
        const val HiddenKeyword = "HiddenKeyword"
        const val IdentifierName = "IdentifierName"
        const val IdentifierToken = "IdentifierToken"
        const val IfDirectiveTrivia = "IfDirectiveTrivia"
        const val IfKeyword = "IfKeyword"
        const val IfStatement = "IfStatement"
        const val ImplicitArrayCreationExpression = "ImplicitArrayCreationExpression"
        const val ImplicitElementAccess = "ImplicitElementAccess"
        const val ImplicitKeyword = "ImplicitKeyword"
        const val ImplicitObjectCreationExpression = "ImplicitObjectCreationExpression"
        const val ImplicitStackAllocArrayCreationExpression = "ImplicitStackAllocArrayCreationExpression"
        const val IncompleteMember = "IncompleteMember"
        const val IndexerDeclaration = "IndexerDeclaration"
        const val IndexerMemberCref = "IndexerMemberCref"
        const val IndexExpression = "IndexExpression"
        const val InitAccessorDeclaration = "InitAccessorDeclaration"
        const val InitKeyword = "InitKeyword"
        const val InKeyword = "InKeyword"
        const val InterfaceDeclaration = "InterfaceDeclaration"
        const val InterfaceKeyword = "InterfaceKeyword"
        const val InternalKeyword = "InternalKeyword"
        const val InterpolatedMultiLineRawStringStartToken = "InterpolatedMultiLineRawStringStartToken"
        const val InterpolatedRawStringEndToken = "InterpolatedRawStringEndToken"
        const val InterpolatedSingleLineRawStringStartToken = "InterpolatedSingleLineRawStringStartToken"
        const val InterpolatedStringEndToken = "InterpolatedStringEndToken"
        const val InterpolatedStringExpression = "InterpolatedStringExpression"
        const val InterpolatedStringStartToken = "InterpolatedStringStartToken"
        const val InterpolatedStringText = "InterpolatedStringText"
        const val InterpolatedStringTextToken = "InterpolatedStringTextToken"
        const val InterpolatedStringToken = "InterpolatedStringToken"
        const val InterpolatedVerbatimStringStartToken = "InterpolatedVerbatimStringStartToken"
        const val Interpolation = "Interpolation"
        const val InterpolationAlignmentClause = "InterpolationAlignmentClause"
        const val InterpolationFormatClause = "InterpolationFormatClause"
        const val IntKeyword = "IntKeyword"
        const val IntoKeyword = "IntoKeyword"
        const val InvocationExpression = "InvocationExpression"
        const val IsExpression = "IsExpression"
        const val IsKeyword = "IsKeyword"
        const val IsPatternExpression = "IsPatternExpression"
        const val JoinClause = "JoinClause"
        const val JoinIntoClause = "JoinIntoClause"
        const val JoinKeyword = "JoinKeyword"
        const val LabeledStatement = "LabeledStatement"
        const val LeftShiftAssignmentExpression = "LeftShiftAssignmentExpression"
        const val LeftShiftExpression = "LeftShiftExpression"
        const val LessThanEqualsToken = "LessThanEqualsToken"
        const val LessThanExpression = "LessThanExpression"
        const val LessThanLessThanEqualsToken = "LessThanLessThanEqualsToken"
        const val LessThanLessThanToken = "LessThanLessThanToken"
        const val LessThanOrEqualExpression = "LessThanOrEqualExpression"
        const val LessThanSlashToken = "LessThanSlashToken"
        const val LessThanToken = "LessThanToken"
        const val LetClause = "LetClause"
        const val LetKeyword = "LetKeyword"
        const val LineDirectivePosition = "LineDirectivePosition"
        const val LineDirectiveTrivia = "LineDirectiveTrivia"
        const val LineKeyword = "LineKeyword"
        const val LineSpanDirectiveTrivia = "LineSpanDirectiveTrivia"
        const val List = "List"
        const val ListPattern = "ListPattern"
        const val LoadDirectiveTrivia = "LoadDirectiveTrivia"
        const val LoadKeyword = "LoadKeyword"
        const val LocalDeclarationStatement = "LocalDeclarationStatement"
        const val LocalFunctionStatement = "LocalFunctionStatement"
        const val LockKeyword = "LockKeyword"
        const val LockStatement = "LockStatement"
        const val LogicalAndExpression = "LogicalAndExpression"
        const val LogicalNotExpression = "LogicalNotExpression"
        const val LogicalOrExpression = "LogicalOrExpression"
        const val LongKeyword = "LongKeyword"
        const val MakeRefExpression = "MakeRefExpression"
        const val MakeRefKeyword = "MakeRefKeyword"
        const val ManagedKeyword = "ManagedKeyword"
        const val MemberBindingExpression = "MemberBindingExpression"
        const val MethodDeclaration = "MethodDeclaration"
        const val MethodKeyword = "MethodKeyword"
        const val MinusEqualsToken = "MinusEqualsToken"
        const val MinusGreaterThanToken = "MinusGreaterThanToken"
        const val MinusMinusToken = "MinusMinusToken"
        const val MinusToken = "MinusToken"
        const val ModuleKeyword = "ModuleKeyword"
        const val ModuloAssignmentExpression = "ModuloAssignmentExpression"
        const val ModuloExpression = "ModuloExpression"
        const val MultiLineCommentTrivia = "MultiLineCommentTrivia"
        const val MultiLineDocumentationCommentTrivia = "MultiLineDocumentationCommentTrivia"
        const val MultiLineRawStringLiteralToken = "MultiLineRawStringLiteralToken"
        const val MultiplyAssignmentExpression = "MultiplyAssignmentExpression"
        const val MultiplyExpression = "MultiplyExpression"
        const val NameColon = "NameColon"
        const val NameEquals = "NameEquals"
        const val NameMemberCref = "NameMemberCref"
        const val NameOfKeyword = "NameOfKeyword"
        const val NamespaceDeclaration = "NamespaceDeclaration"
        const val NamespaceKeyword = "NamespaceKeyword"
        const val NewKeyword = "NewKeyword"
        const val None = "None"
        const val NotEqualsExpression = "NotEqualsExpression"
        const val NotKeyword = "NotKeyword"
        const val NotPattern = "NotPattern"
        const val NullableDirectiveTrivia = "NullableDirectiveTrivia"
        const val NullableKeyword = "NullableKeyword"
        const val NullableType = "NullableType"
        const val NullKeyword = "NullKeyword"
        const val NullLiteralExpression = "NullLiteralExpression"
        const val NumericLiteralExpression = "NumericLiteralExpression"
        const val NumericLiteralToken = "NumericLiteralToken"
        const val ObjectCreationExpression = "ObjectCreationExpression"
        const val ObjectInitializerExpression = "ObjectInitializerExpression"
        const val ObjectKeyword = "ObjectKeyword"
        const val OmittedArraySizeExpression = "OmittedArraySizeExpression"
        const val OmittedArraySizeExpressionToken = "OmittedArraySizeExpressionToken"
        const val OmittedTypeArgument = "OmittedTypeArgument"
        const val OmittedTypeArgumentToken = "OmittedTypeArgumentToken"
        const val OnKeyword = "OnKeyword"
        const val OpenBraceToken = "OpenBraceToken"
        const val OpenBracketToken = "OpenBracketToken"
        const val OpenParenToken = "OpenParenToken"
        const val OperatorDeclaration = "OperatorDeclaration"
        const val OperatorKeyword = "OperatorKeyword"
        const val OperatorMemberCref = "OperatorMemberCref"
        const val OrAssignmentExpression = "OrAssignmentExpression"
        const val OrderByClause = "OrderByClause"
        const val OrderByKeyword = "OrderByKeyword"
        const val OrKeyword = "OrKeyword"
        const val OrPattern = "OrPattern"
        const val OutKeyword = "OutKeyword"
        const val OverrideKeyword = "OverrideKeyword"
        const val Parameter = "Parameter"
        const val ParameterList = "ParameterList"
        const val ParamKeyword = "ParamKeyword"
        const val ParamsKeyword = "ParamsKeyword"
        const val ParenthesizedExpression = "ParenthesizedExpression"
        const val ParenthesizedLambdaExpression = "ParenthesizedLambdaExpression"
        const val ParenthesizedPattern = "ParenthesizedPattern"
        const val ParenthesizedVariableDesignation = "ParenthesizedVariableDesignation"
        const val PartialKeyword = "PartialKeyword"
        const val PercentEqualsToken = "PercentEqualsToken"
        const val PercentToken = "PercentToken"
        const val PlusEqualsToken = "PlusEqualsToken"
        const val PlusPlusToken = "PlusPlusToken"
        const val PlusToken = "PlusToken"
        const val PointerIndirectionExpression = "PointerIndirectionExpression"
        const val PointerMemberAccessExpression = "PointerMemberAccessExpression"
        const val PointerType = "PointerType"
        const val PositionalPatternClause = "PositionalPatternClause"
        const val PostDecrementExpression = "PostDecrementExpression"
        const val PostIncrementExpression = "PostIncrementExpression"
        const val PragmaChecksumDirectiveTrivia = "PragmaChecksumDirectiveTrivia"
        const val PragmaKeyword = "PragmaKeyword"
        const val PragmaWarningDirectiveTrivia = "PragmaWarningDirectiveTrivia"
        const val PreDecrementExpression = "PreDecrementExpression"
        const val PredefinedType = "PredefinedType"
        const val PreIncrementExpression = "PreIncrementExpression"
        const val PreprocessingMessageTrivia = "PreprocessingMessageTrivia"
        const val PrimaryConstructorBaseType = "PrimaryConstructorBaseType"
        const val PrivateKeyword = "PrivateKeyword"
        const val PropertyDeclaration = "PropertyDeclaration"
        const val PropertyKeyword = "PropertyKeyword"
        const val PropertyPatternClause = "PropertyPatternClause"
        const val ProtectedKeyword = "ProtectedKeyword"
        const val PublicKeyword = "PublicKeyword"
        const val QualifiedCref = "QualifiedCref"
        const val QualifiedName = "QualifiedName"
        const val QueryBody = "QueryBody"
        const val QueryContinuation = "QueryContinuation"
        const val QueryExpression = "QueryExpression"
        const val QuestionQuestionEqualsToken = "QuestionQuestionEqualsToken"
        const val QuestionQuestionToken = "QuestionQuestionToken"
        const val QuestionToken = "QuestionToken"
        const val RangeExpression = "RangeExpression"
        const val ReadOnlyKeyword = "ReadOnlyKeyword"
        const val RecordDeclaration = "RecordDeclaration"
        const val RecordKeyword = "RecordKeyword"
        const val RecordStructDeclaration = "RecordStructDeclaration"
        const val RecursivePattern = "RecursivePattern"
        const val ReferenceDirectiveTrivia = "ReferenceDirectiveTrivia"
        const val ReferenceKeyword = "ReferenceKeyword"
        const val RefExpression = "RefExpression"
        const val RefKeyword = "RefKeyword"
        const val RefType = "RefType"
        const val RefTypeExpression = "RefTypeExpression"
        const val RefTypeKeyword = "RefTypeKeyword"
        const val RefValueExpression = "RefValueExpression"
        const val RefValueKeyword = "RefValueKeyword"
        const val RegionDirectiveTrivia = "RegionDirectiveTrivia"
        const val RegionKeyword = "RegionKeyword"
        const val RelationalPattern = "RelationalPattern"
        const val RemoveAccessorDeclaration = "RemoveAccessorDeclaration"
        const val RemoveKeyword = "RemoveKeyword"
        const val RequiredKeyword = "RequiredKeyword"
        const val RestoreKeyword = "RestoreKeyword"
        const val ReturnKeyword = "ReturnKeyword"
        const val ReturnStatement = "ReturnStatement"
        const val RightShiftAssignmentExpression = "RightShiftAssignmentExpression"
        const val RightShiftExpression = "RightShiftExpression"
        const val SByteKeyword = "SByteKeyword"
        const val ScopedKeyword = "ScopedKeyword"
        const val SealedKeyword = "SealedKeyword"
        const val SelectClause = "SelectClause"
        const val SelectKeyword = "SelectKeyword"
        const val SemicolonToken = "SemicolonToken"
        const val SetAccessorDeclaration = "SetAccessorDeclaration"
        const val SetKeyword = "SetKeyword"
        const val ShebangDirectiveTrivia = "ShebangDirectiveTrivia"
        const val ShortKeyword = "ShortKeyword"
        const val SimpleAssignmentExpression = "SimpleAssignmentExpression"
        const val SimpleBaseType = "SimpleBaseType"
        const val SimpleLambdaExpression = "SimpleLambdaExpression"
        const val SimpleMemberAccessExpression = "SimpleMemberAccessExpression"
        const val SingleLineCommentTrivia = "SingleLineCommentTrivia"
        const val SingleLineDocumentationCommentTrivia = "SingleLineDocumentationCommentTrivia"
        const val SingleLineRawStringLiteralToken = "SingleLineRawStringLiteralToken"
        const val SingleQuoteToken = "SingleQuoteToken"
        const val SingleVariableDesignation = "SingleVariableDesignation"
        const val SizeOfExpression = "SizeOfExpression"
        const val SizeOfKeyword = "SizeOfKeyword"
        const val SkippedTokensTrivia = "SkippedTokensTrivia"
        const val SlashEqualsToken = "SlashEqualsToken"
        const val SlashGreaterThanToken = "SlashGreaterThanToken"
        const val SlashToken = "SlashToken"
        const val SlicePattern = "SlicePattern"
        const val StackAllocArrayCreationExpression = "StackAllocArrayCreationExpression"
        const val StackAllocKeyword = "StackAllocKeyword"
        const val StaticKeyword = "StaticKeyword"
        const val StringKeyword = "StringKeyword"
        const val StringLiteralExpression = "StringLiteralExpression"
        const val StringLiteralToken = "StringLiteralToken"
        const val StructConstraint = "StructConstraint"
        const val StructDeclaration = "StructDeclaration"
        const val StructKeyword = "StructKeyword"
        const val Subpattern = "Subpattern"
        const val SubtractAssignmentExpression = "SubtractAssignmentExpression"
        const val SubtractExpression = "SubtractExpression"
        const val SuppressNullableWarningExpression = "SuppressNullableWarningExpression"
        const val SwitchExpression = "SwitchExpression"
        const val SwitchExpressionArm = "SwitchExpressionArm"
        const val SwitchKeyword = "SwitchKeyword"
        const val SwitchSection = "SwitchSection"
        const val SwitchStatement = "SwitchStatement"
        const val ThisConstructorInitializer = "ThisConstructorInitializer"
        const val ThisExpression = "ThisExpression"
        const val ThisKeyword = "ThisKeyword"
        const val ThrowExpression = "ThrowExpression"
        const val ThrowKeyword = "ThrowKeyword"
        const val ThrowStatement = "ThrowStatement"
        const val TildeToken = "TildeToken"
        const val TrueKeyword = "TrueKeyword"
        const val TrueLiteralExpression = "TrueLiteralExpression"
        const val TryKeyword = "TryKeyword"
        const val TryStatement = "TryStatement"
        const val TupleElement = "TupleElement"
        const val TupleExpression = "TupleExpression"
        const val TupleType = "TupleType"
        const val TypeArgumentList = "TypeArgumentList"
        const val TypeConstraint = "TypeConstraint"
        const val TypeCref = "TypeCref"
        const val TypeKeyword = "TypeKeyword"
        const val TypeOfExpression = "TypeOfExpression"
        const val TypeOfKeyword = "TypeOfKeyword"
        const val TypeParameter = "TypeParameter"
        const val TypeParameterConstraintClause = "TypeParameterConstraintClause"
        const val TypeParameterList = "TypeParameterList"
        const val TypePattern = "TypePattern"
        const val TypeVarKeyword = "TypeVarKeyword"
        const val UIntKeyword = "UIntKeyword"
        const val ULongKeyword = "ULongKeyword"
        const val UnaryMinusExpression = "UnaryMinusExpression"
        const val UnaryPlusExpression = "UnaryPlusExpression"
        const val UncheckedExpression = "UncheckedExpression"
        const val UncheckedKeyword = "UncheckedKeyword"
        const val UncheckedStatement = "UncheckedStatement"
        const val UndefDirectiveTrivia = "UndefDirectiveTrivia"
        const val UndefKeyword = "UndefKeyword"
        const val UnderscoreToken = "UnderscoreToken"
        const val UnknownAccessorDeclaration = "UnknownAccessorDeclaration"
        const val UnmanagedKeyword = "UnmanagedKeyword"
        const val UnsafeKeyword = "UnsafeKeyword"
        const val UnsafeStatement = "UnsafeStatement"
        const val UnsignedRightShiftAssignmentExpression = "UnsignedRightShiftAssignmentExpression"
        const val UnsignedRightShiftExpression = "UnsignedRightShiftExpression"
        const val UShortKeyword = "UShortKeyword"
        const val UsingDirective = "UsingDirective"
        const val UsingKeyword = "UsingKeyword"
        const val UsingStatement = "UsingStatement"
        const val Utf8MultiLineRawStringLiteralToken = "Utf8MultiLineRawStringLiteralToken"
        const val Utf8SingleLineRawStringLiteralToken = "Utf8SingleLineRawStringLiteralToken"
        const val Utf8StringLiteralExpression = "Utf8StringLiteralExpression"
        const val Utf8StringLiteralToken = "Utf8StringLiteralToken"
        const val VariableDeclaration = "VariableDeclaration"
        const val VariableDeclarator = "VariableDeclarator"
        const val VarKeyword = "VarKeyword"
        const val VarPattern = "VarPattern"
        const val VirtualKeyword = "VirtualKeyword"
        const val VoidKeyword = "VoidKeyword"
        const val VolatileKeyword = "VolatileKeyword"
        const val WarningDirectiveTrivia = "WarningDirectiveTrivia"
        const val WarningKeyword = "WarningKeyword"
        const val WarningsKeyword = "WarningsKeyword"
        const val WhenClause = "WhenClause"
        const val WhenKeyword = "WhenKeyword"
        const val WhereClause = "WhereClause"
        const val WhereKeyword = "WhereKeyword"
        const val WhileKeyword = "WhileKeyword"
        const val WhileStatement = "WhileStatement"
        const val WhitespaceTrivia = "WhitespaceTrivia"
        const val WithExpression = "WithExpression"
        const val WithInitializerExpression = "WithInitializerExpression"
        const val WithKeyword = "WithKeyword"
        const val XmlCDataEndToken = "XmlCDataEndToken"
        const val XmlCDataSection = "XmlCDataSection"
        const val XmlCDataStartToken = "XmlCDataStartToken"
        const val XmlComment = "XmlComment"
        const val XmlCommentEndToken = "XmlCommentEndToken"
        const val XmlCommentStartToken = "XmlCommentStartToken"
        const val XmlCrefAttribute = "XmlCrefAttribute"
        const val XmlElement = "XmlElement"
        const val XmlElementEndTag = "XmlElementEndTag"
        const val XmlElementStartTag = "XmlElementStartTag"
        const val XmlEmptyElement = "XmlEmptyElement"
        const val XmlEntityLiteralToken = "XmlEntityLiteralToken"
        const val XmlName = "XmlName"
        const val XmlNameAttribute = "XmlNameAttribute"
        const val XmlPrefix = "XmlPrefix"
        const val XmlProcessingInstruction = "XmlProcessingInstruction"
        const val XmlProcessingInstructionEndToken = "XmlProcessingInstructionEndToken"
        const val XmlProcessingInstructionStartToken = "XmlProcessingInstructionStartToken"
        const val XmlText = "XmlText"
        const val XmlTextAttribute = "XmlTextAttribute"
        const val XmlTextLiteralNewLineToken = "XmlTextLiteralNewLineToken"
        const val XmlTextLiteralToken = "XmlTextLiteralToken"
        const val YieldBreakStatement = "YieldBreakStatement"
        const val YieldKeyword = "YieldKeyword"
        const val YieldReturnStatement = "YieldReturnStatement"
    }
}